name: Build & Publish Docker image → GHCR

on:
  push:
    branches: [ "main" ]        # публикуемся при пуше в main


# GITHUB_TOKEN в job’е получает доступ «packages: write»
permissions:
  contents:  read
  packages:  write
  id-token:  write              # пригодится, если добавите provenance/SBOM

env:
  REGISTRY:    ghcr.io
  IMAGE_NAME:  ${{ github.repository }}   # org/repo → ghcr.io/org/repo

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    # (опционально) эмуляция QEMU — позволит собирать multi-arch
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    # Buildx — современный движок сборки
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Логинимся в GitHub Container Registry под токеном текущего workflow
    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Генерируем корректные теги/лейблы (latest, sha, semver и т.д.)
    - name: Extract image metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    # Сборка и публикация
    - name: Build & Push
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile       # если Dockerfile не в корне — укажите путь
        push: true
        tags:   ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64   # уберите/добавьте нужные архитектуры

  deploy:
    needs: build-and-push         # выполняется только после успешной сборки
    runs-on: ubuntu-latest

    steps:
      - name: Upload docker‑compose.yml на сервер
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "docker-compose.yml"
          target: "/root/3xui-shop/docker-compose.yml"

      - name: Pull, stop, and start containers
        uses: appleboy/ssh-action@v1.0.1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            cd /root/3xui-shop
            docker compose pull            # скачиваем свежие образы
            docker compose stop            # останавливаем текущие контейнеры
            docker compose up -d --remove-orphans   # запускаем в фоне