import logging

from aiogram import Bot

from app.bot.navigation import NavSubscription
from app.bot.payment_gateways import Cryptomus, TelegramStars, Yookassa

logger = logging.getLogger(__name__)


# TODO: REWORK


class PaymentMethod:
    """
    Class representing a payment method with its symbol and currency code.

    This class associates a payment method with its corresponding callback data,
    currency symbol, currency code, and gateway class.

    Attributes:
        callback_data (str): The callback identifier for the payment method.
        symbol (str): The currency symbol associated with the payment method.
        code (str): The currency code associated with the payment method.
        gateway: The payment gateway class associated with this payment method.
    """

    def __init__(self, callback_data: str, symbol: str, code: str, gateway) -> None:
        """
        Initialize a PaymentMethod instance.

        Arguments:
            callback_data (str): The callback identifier for the payment method.
            symbol (str): The currency symbol associated with the payment method.
            code (str): The currency code associated with the payment method.
            gateway: The payment gateway class associated with this payment method.
        """
        self.callback_data = callback_data
        self.symbol = symbol
        self.code = code
        self.gateway = gateway
        logger.debug(f"Initialized PaymentMethod with {callback_data}, {symbol}, {code}")

    @classmethod
    def from_callback(cls, callback_data: str) -> "PaymentMethod":
        """
        Create a PaymentMethod instance based on the callback data.

        Arguments:
            callback_data (str): The callback identifier for the payment method.

        Returns:
            PaymentMethod: The corresponding PaymentMethod instance.

        Raises:
            ValueError: If the callback data is invalid.
        """
        methods = {
            # Navigation.PAY_YOOKASSA: ("₽", "RUB", Yookassa()),
            NavSubscription.PAY_TELEGRAM_STARS: ("★", "XTR", TelegramStars()),
            # Navigation.PAY_CRYPTOMUS: ("$", "USD", Cryptomus()),
        }

        if callback_data not in methods:
            logger.error(f"Invalid callback data: {callback_data}")
            raise ValueError(f"Invalid callback data: {callback_data}")

        symbol, code, gateway = methods[callback_data]
        logger.debug(f"Created PaymentMethod from {callback_data}")
        return cls(callback_data, symbol, code, gateway)


class PaymentService:
    """
    Service for managing payment operations and integrations with various gateways.

    This service interacts with different payment gateways to create payment links
    based on the selected payment method.

    Attributes:
        method (PaymentMethod): The selected payment method instance.
    """

    def __init__(self, callback_data: str) -> None:
        """
        Initialize the PaymentService with a specific payment method based on callback data.

        Arguments:
            callback_data (str): The callback identifier for the payment method.
        """
        logger.debug(f"Initializing PaymentService with {callback_data}")
        self.method = PaymentMethod.from_callback(callback_data)

    async def create_payment(self, data, bot: Bot | None = None) -> str:
        """
        Creates a payment using the selected payment method.

        Arguments:
            data (SubscriptionCallback): The data required to create the payment.
            bot (Bot | None): The bot instance, required for TelegramStars gateway.

        Returns:
            str: A payment link generated by the selected payment gateway.
        """
        logger.debug(f"Creating payment with data: {data}")

        if bot and self.method.callback_data == NavSubscription.PAY_TELEGRAM_STARS:
            return await self.method.gateway.create_payment(data, bot)

        return await self.method.gateway.create_payment(data)
