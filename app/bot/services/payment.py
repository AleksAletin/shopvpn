from aiogram import Bot

from app.bot.navigation import NavigationAction
from app.bot.payment_gateways import Cryptomus, TelegramStars, Yookassa


class PaymentMethod:
    """
    Class representing a payment method with its symbol and currency code.

    Attributes:
        callback_data (str): The callback identifier for the payment method.
        symbol (str): The currency symbol associated with the payment method.
        code (str): The currency code associated with the payment method.
        gateway: The payment gateway class associated with this payment method.
    """

    def __init__(self, callback_data: str, symbol: str, code: str, gateway) -> None:
        """
        Initialize a PaymentMethod instance.

        Arguments:
            callback_data (str): The callback identifier for the payment method.
            symbol (str): The currency symbol associated with the payment method.
            code (str): The currency code associated with the payment method.
            gateway: The payment gateway class associated with this payment method.
        """
        self.callback_data = callback_data
        self.symbol = symbol
        self.code = code
        self.gateway = gateway

    @classmethod
    def from_callback(cls, callback_data: str):
        """
        Create a PaymentMethod instance based on the callback data.

        Arguments:
            callback_data (str): The callback identifier for the payment method.

        Returns:
            PaymentMethod: The corresponding PaymentMethod instance.

        Raises:
            ValueError: If the callback data is invalid.
        """
        methods = {
            NavigationAction.PAY_YOOKASSA: ("₽", "RUB", Yookassa()),
            NavigationAction.PAY_TELEGRAM_STARS: ("★", "XTR", TelegramStars()),
            NavigationAction.PAY_CRYPTOMUS: ("$", "USD", Cryptomus()),
        }

        if callback_data not in methods:
            raise ValueError(f"Invalid callback data: {callback_data}")

        symbol, code, gateway = methods[callback_data]
        return cls(callback_data, symbol, code, gateway)


class PaymentService:
    """
    Service for managing payment operations and integrations with various gateways.

    This service interacts with different payment gateways to facilitate the
    creation of payment links based on the selected payment method.
    """

    def __init__(self, callback_data: str) -> None:
        """
        Initialize the PaymentService with a specific payment method based on callback data.

        Arguments:
            callback_data (str): The callback identifier for the payment method.
        """
        self.method = PaymentMethod.from_callback(callback_data)

    async def create_payment(
        self,
        data: dict,
        bot: Bot | None = None,
    ) -> str:
        """
        Creates a payment using the selected payment method.

        Arguments:
            data (dict): The data required to create the payment.
            bot (Bot | None): The bot instance, required for TelegramStars gateway.

        Returns:
            str: A payment link generated by the selected payment gateway.
        """
        if bot and self.method.callback_data == NavigationAction.PAY_TELEGRAM_STARS:
            return await self.method.gateway.create_payment(data, bot)

        return await self.method.gateway.create_payment(data)
