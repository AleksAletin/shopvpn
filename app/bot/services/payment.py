import logging

from aiogram import Bot
from aiohttp.web import Application
from sqlalchemy.ext.asyncio import AsyncSession

from app.bot.navigation import NavSubscription, SubscriptionData
from app.bot.payment_gateways import Cryptomus, PaymentGateway, TelegramStars, Yookassa
from app.config import Config

logger = logging.getLogger(__name__)


class PaymentService:
    """
    Service for managing payment operations and integrations with various gateways.

    This service interacts with different payment gateways to create payment links
    based on the selected payment method.

    Attributes:
        gateways (dict[str, PaymentGateway]): A dictionary of payment gateways keyed by method name.
    """

    def __init__(
        self, app: Application, config: Config, bot: Bot, session: AsyncSession, vpn_service
    ):
        """
        Initializes the PaymentService and configures available payment gateways.

        Arguments:
            app (Application): The Aiohttp application instance used to set up routes.
            config (Config): The configuration object containing payment gateway settings.
            bot (Bot): The Telegram Bot instance.
        """
        self.gateways: dict[str, PaymentGateway] = {}
        self.session = session
        if config.yookassa.SHOP_ID and config.yookassa.TOKEN:
            yookassa = Yookassa(config, bot)
            self.gateways[NavSubscription.PAY_YOOKASSA] = yookassa
            app.router.add_post(
                f"/yookassa",
                lambda request: Yookassa.webhook_handler(request, session, bot, vpn_service),
            )
        self.gateways[NavSubscription.PAY_TELEGRAM_STARS] = TelegramStars()

        logger.info(f"PaymentService initialized.")

    def get_gateway(self, gateway_name: str) -> PaymentGateway:
        """
        Retrieves the payment gateway instance for the given gateway name.

        Arguments:
            gateway_name (str): The name of the gateway.

        Returns:
            PaymentGateway: The corresponding payment gateway instance.
        """
        return self.gateways.get(gateway_name)

    async def create_payment(
        self,
        gateway: PaymentGateway,
        data: SubscriptionData,
        bot: Bot | None = None,
    ) -> str:
        """
        Creates a payment link using the selected payment gateway.

        Arguments:
            gateway (PaymentGateway): The payment gateway to use for creating the payment.
            data (SubscriptionData): The data required to create the payment link.
            bot (Bot | None): The bot instance, required for TelegramStars gateway.

        Returns:
            str: A payment link generated by the selected payment gateway.
        """
        logger.debug(f"Creating payment with data: {data}")

        if bot and isinstance(gateway, TelegramStars):
            return await gateway.create_payment(self.session, data, bot)

        return await gateway.create_payment(self.session, data)
