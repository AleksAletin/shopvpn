from aiogram import Bot

from app.bot.navigation import NavigationAction
from app.bot.payment_gateways import Cryptomus, TelegramStars, Yookassa


class PaymentMethod:
    """
    Class representing a payment method with its symbol and currency code.
    """

    def __init__(self, callback_data: str, symbol: str, code: str, gateway) -> None:
        """
        Initialize a PaymentMethod instance.

        Args:
            callback_data (str): The callback identifier for the payment method.
            symbol (str): The currency symbol associated with the payment method.
            code (str): The currency code associated with the payment method.
            gateway: The payment gateway class associated with this payment method.
        """
        self.callback_data = callback_data
        self.symbol = symbol
        self.code = code
        self.gateway = gateway

    @classmethod
    def from_callback(cls, callback_data: str):
        """
        Create a PaymentMethod instance based on the callback data.

        Args:
            callback_data (str): The callback identifier for the payment method.

        Returns:
            PaymentMethod: The corresponding PaymentMethod instance.
        """
        methods = {
            NavigationAction.PAY_YOOKASSA: ("₽", "RUB", Yookassa()),
            NavigationAction.PAY_TELEGRAM_STARS: ("★", "XTR", TelegramStars()),
            NavigationAction.PAY_CRYPTOMUS: ("$", "USD", Cryptomus()),
        }

        if callback_data not in methods:
            raise ValueError(f"Invalid callback data: {callback_data}")

        symbol, code, gateway = methods[callback_data]
        return cls(callback_data, symbol, code, gateway)


class PaymentService:
    """
    Service for managing payment operations and integrations with various gateways.
    """

    @staticmethod
    def get_payment_method(callback_data: str) -> PaymentMethod:
        """
        Retrieve a PaymentMethod instance based on the callback data.

        Args:
            callback_data (str): The callback data to search for.

        Returns:
            PaymentMethod: The corresponding PaymentMethod instance.
        """
        return PaymentMethod.from_callback(callback_data)

    async def create_payment(
        self,
        payment_method: PaymentMethod,
        data: dict,
        bot: Bot | None = None,
    ) -> str:
        """
        Creates a payment using the selected payment method.

        Args:
            payment_method (PaymentMethod): The selected payment method.
            plan (str): The selected plan for the subscription.
            duration (str): The duration of the subscription (e.g., "1 month", "3 days").
            price (int): The price of the subscription.
            bot (Bot | None): The bot instance, required for TelegramStars gateway.

        Returns:
            str: A payment link generated by the selected payment gateway.
        """
        if bot and payment_method.callback_data == NavigationAction.PAY_TELEGRAM_STARS:
            return await payment_method.gateway.create_payment(data, bot)

        return await payment_method.gateway.create_payment(data)
